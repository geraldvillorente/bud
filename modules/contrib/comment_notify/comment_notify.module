<?php

/**
 * @file
 *
 * This module provides comment follow-up e-mail notification for anonymous and registered users.
 */

use Drupal\comment\CommentInterface;
use Drupal\Component\Render\PlainTextOutput;
use Drupal\Component\Utility\Html;
use Drupal\Component\Utility\Unicode;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Language\LanguageInterface;
use Drupal\field\Entity\FieldConfig;
use Drupal\node\Entity\NodeType;

define('COMMENT_NOTIFY_DISABLED', 0);
define('COMMENT_NOTIFY_NODE', 1);
define('COMMENT_NOTIFY_COMMENT', 2);

/**
 * Provide an array of available options for notification on a comment.
 */
function _comment_notify_options() {
  $total_options = array(
    COMMENT_NOTIFY_NODE     => t('All comments'),
    COMMENT_NOTIFY_COMMENT  => t('Replies to my comment')
  );

  $selected_options = array_filter(\Drupal::config('comment_notify.settings')->get('available_alerts'));
  $available_options = array_intersect_key($total_options, $selected_options);

  return $available_options;
}


function comment_notify_form_comment_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $user = \Drupal::currentUser();
  if (!($user->hasPermission('subscribe to comments') || $user->hasPermission('administer comments'))) {
    return;
  }

  /** @var \Drupal\Core\Entity\EntityInterface $commented_entity */
  $commented_entity = $form_state->getFormObject()->getEntity()->getCommentedEntity();

  // Only add the checkbox if this is an enabled content type
  $enabled_types = \Drupal::config('comment_notify.settings')->get('node_types');
  if (!in_array($commented_entity->bundle(), $enabled_types)) {
    return;
  }

  $available_options = _comment_notify_options();
  // Add the checkbox for anonymous users.
  if ($user->isAnonymous()) {
    // If anonymous users can't enter their e-mail don't tempt them with the checkbox.
    if (empty($form['author']['mail'])) {
      return;
    }
    $form['#validate'][] = 'comment_notify_comment_validate';
  }
  module_load_include('inc', 'comment_notify', 'comment_notify');
  $preference = comment_notify_get_user_comment_notify_preference($user->id());

  // If you want to hide this on your site see http://drupal.org/node/322482
  $form['comment_notify_settings'] = array(
    '#attached' => ['library' => ['comment_notify/comment_notify']],
  );
  $form['comment_notify_settings']['notify'] = array(
    '#type' => 'checkbox',
    '#title' => t('Notify me when new comments are posted'),
    '#default_value' => (bool) $preference,
  );

  $form['comment_notify_settings']['notify_type'] = array(
    '#type' => 'radios',
    '#options' => $available_options,
    '#default_value' => $preference ? $preference : 1,
  );
  if (count($available_options) == 1) {
    $form['comment_notify_settings']['notify_type']['#type'] = 'hidden';
    $form['comment_notify_settings']['notify_type']['#value'] = key($available_options);
  }

  // If this is an existing comment we set the default value based on their selection last time.
  /** @var \Drupal\comment\CommentInterface $comment */
  $comment = $form_state->getFormObject()->getEntity();
  if (!$comment->isNew()) {
    $notify = comment_notify_get_notification_type($comment->id());
    $form['comment_notify_settings']['notify']['#default_value'] = (bool) $notify;
    if (count($available_options) > 1) {
      $form['comment_notify_settings']['notify_type']['#default_value'] = empty($notify) ? COMMENT_NOTIFY_NODE : $notify;
    }
    else {
      $form['comment_notify_settings']['notify_type']['#default_value'] = key($available_options);
    }
  }

  $form['actions']['submit']['#submit'][] = '_comment_notify_submit_comment_form';
}

function comment_notify_comment_validate(&$form, FormStateInterface $form_state) {
  $user = \Drupal::currentUser();
  // We assume that if they are non-anonymous then they have a valid mail.
  // For anonymous users, though, we verify that they entered a mail and let comment.module validate it is real.
  if ($user->isAnonymous() && $form['comment_notify_settings']['notify']['#value'] && empty($form['author']['mail']['#value'])) {
    $form_state->setErrorByName('mail', t('If you want to subscribe to comments you must supply a valid e-mail address.'));
  }
}

function comment_notify_comment_publish($comment) {
  // And send notifications - the real purpose of the module.
  _comment_notify_mailalert($comment);
}

/**
 * Additional submit handler for the comment form.
 */
function _comment_notify_submit_comment_form(array &$form, FormStateInterface $form_state) {
  module_load_include('inc', 'comment_notify', 'comment_notify');

  /** @var \Drupal\comment\CommentInterface $comment */
  $comment = $form_state->getFormObject()->getEntity();
  $user = \Drupal::currentUser();

  // If the form component is visible, these values should be in the form state.
  // Otherwise, use the user's preferences.
  if ($form_state->hasValue('notify') && $form_state->hasValue('notify_type')) {
    $status = $form_state->getValue('notify') ? $form_state->getValue('notify_type') : COMMENT_NOTIFY_DISABLED;
    // Update user's preference.
    if (!$user->isAnonymous()) {
      comment_notify_set_user_notification_setting($user->id(), NULL, $status);
    }
  }
  else {
    $status = comment_notify_get_user_comment_notify_preference($user->id());
  }

  // Save notification settings.
  if (comment_notify_get_notification_type($comment->id())) {
    // Update existing record.
    comment_notify_update_notification($comment->id(), $status);
  }
  else {
    // For new comments, we first build up a string to be used as the identifier
    // for the alert. This identifier is used to later unsubscribe the user or
    // allow them to potentially edit their comment / preferences if they are
    // anonymous. The string is built with token and their host and comment
    // identifier. It is stored and referenced, we really just need something
    // unique/unguessable. See comment_notify_unsubscribe_by_hash().
    $hostname = !$comment->getHostname() ? $comment->getHostname() : (isset($user->hostname) ? $user->hostname : '');
    $notify_hash = \Drupal::csrfToken()->get($hostname . $comment->id());
    comment_notify_add_notification($comment->id(), $status, $notify_hash);
  }
}

/**
 * Implements hook_ENTITY_TYPE_update() for comment.
 */
function comment_notify_comment_update(CommentInterface $comment) {
  // And send notifications - the real purpose of the module.
  if ($comment->isPublished()) {
    _comment_notify_mailalert($comment);
  }
}

/**
 * Implements hook_comment_insert().
 */
function comment_notify_comment_insert(CommentInterface $comment) {
  module_load_include('inc', 'comment_notify', 'comment_notify');

  // And send notifications - the real purpose of the module.
  if ($comment->isPublished()) {
    _comment_notify_mailalert($comment);
  }
}

function comment_notify_comment_delete(CommentInterface $comment) {
  module_load_include('inc', 'comment_notify', 'comment_notify');
  comment_notify_remove_all_notifications($comment->id());
}


/**
 * Implement hook_form_alter().
 */
function comment_notify_form_user_form_alter(&$form, FormStateInterface &$form_state, $form_id) {
  module_load_include('inc', 'comment_notify', 'comment_notify');

  /** @var \Drupal\user\UserInterface $user */
  $user = $form_state->getFormObject()->getEntity();
  $notify_settings = $user->id() ? comment_notify_get_user_notification_setting($user->id()) : comment_notify_get_default_notification_setting();

  $form['comment_notify_settings'] = array(
    '#type' => 'details',
    '#title' => t('Comment follow-up notification settings'),
    '#weight' => 4,
    '#open' => TRUE,
  );

  // Only show the node followup UI if the user has permission to create nodes.
  $nodes = FALSE;
  foreach (node_type_get_names() as $type => $name) {
    if (\Drupal::entityManager()->getAccessControlHandler('node')->createAccess($type)) {
      $nodes = TRUE;
      break;
    }
  }

  if (\Drupal::currentUser()->hasPermission('administer nodes') || $nodes) {
    $form['comment_notify_settings']['node_notify'] = array(
      '#type' => 'checkbox',
      '#title' => t('Receive content follow-up notification e-mails'),
      '#default_value' => $notify_settings->node_notify,
      '#description' => t('Check this box to receive an e-mail notification for follow-ups on your content. You can not disable notifications for individual threads.')
    );
  }
  else {
    $form['comment_notify_settings']['node_notify'] = array(
      '#type' => 'hidden',
      '#value' => COMMENT_NOTIFY_DISABLED,
    );
  }

  $available_options[COMMENT_NOTIFY_DISABLED] = t('No notifications');
  $available_options += _comment_notify_options();
  $form['comment_notify_settings']['comment_notify'] = array(
    '#type' => 'select',
    '#title' => t('Receive comment follow-up notification e-mails'),
    '#default_value' => $notify_settings->comment_notify,
    '#options' => $available_options,
    '#description' => t("Check this box to receive e-mail notification for follow-up comments to comments you posted. You can later disable this on a post-by-post basis... so if you leave this to YES, you can still disable follow-up notifications for comments you don't want follow-up mails anymore - i.e. for very popular posts.")
  );

  $form['actions']['submit']['#submit'][] = '_comment_notify_submit_user_form';
}

/**
 * Additional submit handler for the user form.
 */
function _comment_notify_submit_user_form(array &$form, FormStateInterface $form_state) {
  module_load_include('inc', 'comment_notify', 'comment_notify');

  /** @var \Drupal\user\UserInterface $user */
  $user = $form_state->getFormObject()->getEntity();

  if (!$user->isAnonymous()) {
    // Save the values to {comment_notify_user_settings}.
    comment_notify_set_user_notification_setting($user->id(), $form_state->getValue('node_notify'), $form_state->getValue('comment_notify'));
  }
}

function comment_notify_user_cancel($edit, $account, $method) {
  module_load_include('inc', 'comment_notify', 'comment_notify');
  comment_notify_delete_user_notification_setting($account->uid);
}

/**
 * Implements hook_comment_load().
 */
function comment_notify_comment_load($comments) {
  // Load some comment_notify specific information into the comment object.
  $query = db_select('comment_notify', 'cn');
  $query->join('comment_field_data', 'c', 'c.cid = cn.cid');
  $query->leftJoin('users_field_data', 'u', 'c.uid = u.uid');
  $query->condition('c.cid', array_keys($comments), 'IN');
  $query->fields('cn', array('cid', 'notify', 'notify_hash', 'notified'));
  $query->addField('c', 'mail', 'cmail');
  $query->addField('u', 'init', 'uinit');
  $query->addField('u', 'mail', 'umail');

  $records = $query->execute()->fetchAllAssoc('cid');
  foreach ($records as $cid => $record) {
    $comments[$cid]->notify = $record->notify;
    $comments[$cid]->notify_type = $record->notify;
    $comments[$cid]->notify_hash = $record->notify_hash;
    $comments[$cid]->notified = $record->notified;
    $comments[$cid]->cmail = $record->cmail;
    $comments[$cid]->uinit = $record->uinit;
    $comments[$cid]->umail = $record->umail;
  }
}

/**
 * Private function to send the notifications.
 *
 * @param \Drupal\comment\CommentInterface $comment
 *   The comment entity.
 */
function _comment_notify_mailalert(CommentInterface $comment) {

  module_load_include('inc', 'comment_notify', 'comment_notify');

  $config = \Drupal::config('comment_notify.settings');
  $user = \Drupal::currentUser();
  $nid = $comment->getCommentedEntityId();

  // Check to see if a notification has already been sent for this
  // comment so that edits to a comment don't trigger an additional
  // notification.
  if (!empty($comment->notified)) {
    return;
  }

  /** @var \Drupal\node\NodeInterface $node */
  $node = \Drupal::entityManager()->getStorage('node')->load($nid);

  // No mails if this is not an enabled content type
  $enabled_types = $config->get('node_types');
  if (!in_array($node->bundle(), $enabled_types) && !empty($enabled_types)) {
    return;
  }

  if (empty($comment->getAuthorEmail())) {
    /** @var \Drupal\user\UserInterface $comment_account */
    if ($comment_account = user_load_by_name($comment->getAuthorName())) {
      $comment_mail = $comment_account->getEmail() ?: '';
    }
  }
  else {
    $comment_mail = $comment->getAuthorEmail();
  }
  $sent_to = array();

  // Send to a subscribed author if they are not the current commenter.
  $author = $node->getOwner();
  $author_notify_settings = comment_notify_get_user_notification_setting($author->id()) ?: comment_notify_get_default_notification_setting();

  // Do they explicitly want this? Or is it default to send to users?
  // Is the comment author not the node author? Do they have access? Do they have an email (e.g. anonymous)?
  if (
    (
      (!empty($author_notify_settings->node_notify) && $author_notify_settings->node_notify == 1)
      || ($config->get('enable_default.entity_author') == 1 && !isset($author_notify_settings->node_notify))
    )
    && $user->id() != $author->id()
    && $node->access('view', $author)
    && !empty($author->getEmail())
  ) {
    $raw_values = $config->get('mail_templates.entity_author');
    $token_data = ['comment' => $comment, 'node' => $node];
    $message['subject'] = PlainTextOutput::renderFromHtml(\Drupal::token()->replace($raw_values['subject'], $token_data));
    $message['body'] = \Drupal::token()->replace($raw_values['body'], $token_data);

    $language = $author->getPreferredLangcode();
    \Drupal::service('plugin.manager.mail')->mail('comment_notify', 'comment_notify_mail', $author->getEmail(), $language, $message);
    $sent_to[] = strtolower($author->getEmail());
  }

  // For "reply to my comments" notifications, figure out what thread this is.
  $thread = $comment->getThread() ?: '';

  // Get the list of commenters to notify.
  $watchers = comment_notify_get_watchers($nid);

  foreach ($watchers as $alert) {
    // If the user is not anonymous, always load the current e-mail address
    // from his or her user account instead of trusting $comment->mail.
    $recipient_user = $alert->getOwner();
    $mail = !empty($recipient_user->getEmail()) ? $recipient_user->getEmail() : $alert->getAuthorEmail();

    $relevant_thread = Unicode::substr($thread, 0, Unicode::strlen($alert->getThread()) -1);
    if ($alert->notify == COMMENT_NOTIFY_COMMENT && strcmp($relevant_thread . '/', $alert->getThread()) != 0) {
      continue;
    }

    if ($mail != $comment_mail && !in_array(strtolower($mail), $sent_to) && ($alert->getOwnerId() != $comment->getOwnerId() || $alert->getOwnerId() == 0)) {
      $message = array();

      // Make sure they have access to this node before showing a bunch of node information.
      if (!$node->access('view', $recipient_user)) {
        continue;
      }

      $raw_values = $config->get('mail_templates.watcher');
      $token_data = ['comment' => $comment, 'node' => $node, 'comment-subscribed' => $alert];
      $message['subject'] = PlainTextOutput::renderFromHtml(\Drupal::token()->replace($raw_values['subject'], $token_data));
      $message['body'] = \Drupal::token()->replace($raw_values['body'], $token_data);

      $language = !empty($alert->uid) ? $recipient_user->getPreferredLangcode() : LanguageInterface::LANGCODE_DEFAULT;
      \Drupal::service('plugin.manager.mail')->mail('comment_notify', 'comment_notify_mail', $mail, $language, $message);
      $sent_to[] = strtolower($mail);

      // Make the mail link to user's /edit, unless it's an anonymous user.
      if ($alert->getOwnerId() != 0) {
        $user_mail = $alert->link($mail, 'edit-form');
      }
      else {
        $user_mail = Html::escape($mail);
      }

      // Add an entry to the watchdog log.
      \Drupal::logger('comment_notify')->notice('Notified: @user_mail', ['@user_mail' => $user_mail, 'link' => $alert->link(t('source comment'))]);
    }
  }
  // Record that a notification was sent for this comment so that
  // notifications aren't sent again if the comment is later edited.
  comment_notify_mark_comment_as_notified($comment);
}

/**
 * Implements hook_mail().
 */
function comment_notify_mail($key, &$message, $params) {
  $message['subject'] = $params['subject'];
  $message['body'][] = $params['body'];
}

/**
 * Get the unsubscribe link for a comment subscriber.
 *
 * @param \Drupal\comment\CommentInterface $comment
 *   The subscribed comment object.
 *
 * @return \Drupal\Core\Url|null
 *   A Url object for the unsubscribe page, or NULL if the comment is missing a
 *   notification hash.
 *
 * @todo In what case would a comment be missing its notification hash?
 */
function comment_notify_get_unsubscribe_url(CommentInterface $comment) {
  if (!empty($comment->notify_hash)) {
    return \Drupal::url('comment_notify.disable', ['hash' => $comment->notify_hash]);
  }
  return NULL;
}
/**
 * Implements hook_field_extra_fields().
 */
function comment_notify_entity_extra_field_info() {
  module_load_include('inc', 'comment_notify', 'comment_notify');
  $extras = array();

  foreach (\Drupal::config('comment_notify.settings')->get('node_types') as $node_type) {
    $comment_field = FieldConfig::loadByName('node', $node_type, 'comment');
    if ($comment_field) {
      $comment_type = $comment_field->getSetting('comment_type');
      $extras['comment'][$comment_type]['form']['comment_notify_settings'] = array(
        'label' => t('Comment Notify settings'),
        'description' => t('@node_type settings for Comment Notify', array('@node_type' => NodeType::load($node_type)->label())),
        'weight' => 1,
      );
    }
  }

  $extras['user']['user']['form']['comment_notify_settings'] = array(
    'label' => t('Comment Notify settings'),
    'description' => t('User settings for Comment Notify'),
    'weight' => 4,
  );
  return $extras;
}

